# The name of your workflow. GitHub displays the names of your workflows on your repository's "Actions" tab
name: Go

# To automatically trigger the workflow
on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main

# A workflow run is made up of one or more jobs, which run in parallel by default
# Each job runs in a runner environment specified by runs-on
jobs:
  # Unique identifier of our job (`job_id`)
  test:
    # Sets the name `Test` for the job, which is displayed in the GitHub UI
    name: Test
    # Containers must run in Linux based operating systems
    runs-on: ubuntu-latest
    steps:
      # Downloads a copy of the code in your repository before running CI tests
      - name: Check out repository code
        uses: actions/checkout@v4

      # Set up Go environment
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.20" # Specify the Go version

      - name: Run tests
        run: go test ./...

  # `fmt` container job
  fmt:
    name: Gofmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.20"
      - name: Check formatting
        run: gofmt -l .

  # `lint` container job
  lint:
    name: Golint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.20"
      - name: Install golangci-lint
        run: go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
      - name: Run golangci-lint
        run: golangci-lint run

  # `coverage` container job
  coverage:
    name: Code coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "latest"
      - name: Run tests with coverage
        run: go test -coverprofile=coverage.out ./...
      - name: Generate coverage report
        run: go tool cover -html=coverage.out -o coverage.html
      - uses: actions/upload-artifact@v4
        with:
          name: "Coverage report"
          path: coverage.html
